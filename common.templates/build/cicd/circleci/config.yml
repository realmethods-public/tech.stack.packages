#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = $aib.getApplicationNameFormatted() )
#end
#set( $workingDir = $appName )
version: 2.1

references:
#cacheReferences("~/${appName}")
#terraformReferences()

jobs: 

  # core job
  build_test_project:

    # assign the working directory
    working_directory: *working_directory

    # run the steps with Docker as the primary container
    # job commands run in this container
    # CircleCI Java8 image, installs Apache Maven
    # MySQL 8 image
    docker:
      - image: circleci/openjdk:8-jdk-browsers
      - image: mysql:8.0
        # required env vars
        environment:
            MYSQL_ALLOW_EMPTY_PASSWORD: yes
            MYSQL_ROOT_PASSWORD: ''
            MYSQL_DATABASE: circleci

    # steps that comprise the `build_project` job
    steps:

      # check out source code to working directory
      - checkout

      # Restore any previous cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - *restore_repo

      # gets the project dependencies and tests using JUnit
      - run: 
#if ( ${aib.getParam('nexus.inUse')} == "true" )
#set( $nexusUserName = ${aib.getParam('nexus.userName')} )
#set( $nexusPassword = ${aib.getParam('nexus.password')} )
#set( $nexusRepoUrl = ${aib.getParam('nexus.mavenRepoUrl')} )
          name: Running test using Junit and deploy to Nexus Repo
          command: mvn deploy --settings settings.xml -Dinternal.repo.username=${nexusUserName} -Dinternal.repo.password=${nexusPassword} -Dinternal.repo.url=${nexusRepoUrl}
#else        
          name: compiling, running test using Junit, the create a deployable war file
          command: mvn package
#end    
          environment:
              DATABASE_USERNAME: root
              DATABASE_PASSWORD:
              DATABASE_DIALECT: org.hibernate.dialect.MySQL8Dialect
              DATABASE_DRIVER: com.mysql.jdbc.Driver
              DATABASE_URL: jdbc:mysql://localhost:3306/circleci?createDatabaseIfNotExist=true

      # cache everything using checksum of pom.xml as the cache-key
      - *save_repo

      # save the results from the testing that occurred during
      # the maven packaging in the prior step
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      # Upload test results for display in Test Summary:
      # https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: ~/test-results

      # Upload test summary for display in Artifacts:
      # https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: ~/test-results/junit

#dockerImageDeclaration()
#terraformJobDefinition()

#  workflow to execute the build_test, docker_build, and terraform jobs

workflows:
  version: 2
  build_test_deploy_workflow:
    jobs:
      - build_test_project
#terraformJobDeclaration()