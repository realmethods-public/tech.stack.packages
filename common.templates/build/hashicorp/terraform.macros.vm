########################################################################
## terraform job declaration macro
########################################################################
#macro( terraformJobDeclaration )
#if( ${aib.getParam("terraform.inUse")} == "true" )
      - docker_build:
          requires:
            - build_test_project
      - terraform:
          requires:
            - docker_build
#end
#end##macro( terraformJobDeclaration )

########################################################################
## terraform references macro
########################################################################
#macro( terraformReferences )
#if( ${aib.getParam("terraform.inUse")} == "true" )      
  
base_terraform_image: &base_terraform_image
  hashicorp/terraform:0.11.14
  
terraform_config: &terraform_config
  docker:
    - image: *base_terraform_image
      environment:
          TERRAFORM_DIR: terraform
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd /home/circleci/gitRoot/terraform
      terraform init
#end
#end##macro( terraformReferenceDeclaration )

########################################################################
## terraform job definition macro
########################################################################
#macro( terraformJobDefinition )
#set( $fingerprint = ${aib.getParam("terraform.ssh-fingerprint")} )
  terraform:
    <<: *terraform_config
    steps:
      - *restore_repo
      - *terraform_init
      - add_ssh_keys: # fingerprint is returned when the private SSH key is applied to this CircleCI project
          fingerprints:
            - "${fingerprint}"
      - run:
          name: terraform plan
          command: |
            cd /home/circleci/gitRoot/terraform
            terraform plan -out=terraform.plan -var aws-access-key=$USER_AWS_ACCESSKEY -var aws-secret-key=$USER_AWS_SECRETKEY
            terraform apply -auto-approve "terraform.plan"
#end##macro( terraformJobDefinition )

########################################################################
## determiner for which terraform file to use
########################################################################
#macro( determineDeploymentPlan )
#if ( $aib.getParam( "kubernetes.inUse" ) == "true" )
account.json=terraform
k8s.tf=terraform.k8s
pods.tf=terraform.k8s
services.tf=terraform.k8s
k8s.variables.tf=terraform.k8s
#if ( $aib.getParam( "kubernetes.hostTarget" ) == "google" )
k8.google.main.tf=terraform
gcp.cluster.tf=terraform.gke
gcp.tf=terraform.gke
gcp.variables.tf=terraform.gke
#elseif ( $aib.getParam( "kubernetes.hostTarget" ) == "aws" )
k8.aws.main.tf=terraform
aws.cluster.tf=terraform.eks
aws.tf=terraform.eks
aws.variables.tf=terraform.eks
#elseif ( $aib.getParam( "kubernetes.hostTarget" ) == "nutanix" )
main.tf=terraform
#end ##if ( $aib.getParam( "kubernetes.hostTarget" ) == "google" )
#else
main.tf=terraform
variables.tf=terraform
#end ##if ( $aib.getParam( "kubernetes.inUse" ) == "true" )
#end ##macro( determineDeploymentPlan )