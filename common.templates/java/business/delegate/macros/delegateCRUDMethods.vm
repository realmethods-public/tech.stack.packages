#macro( delegateCRUDMethods )
#if ( $classObject.isAbstract() == false )
   /**
	* ${classObject.getName()} Business Delegate Factory Method
	*
	* Returns a singleton instance of ${classObject.getName()}BusinessDelegate().
	* All methods are expected to be self-sufficient.
	*
	* @return 	${classObject.getName()}BusinessDelegate
	*/
	static public ${classObject.getName()}BusinessDelegate get${classObject.getName()}Instance()
	{
	    if ( singleton == null )
	    {
	    	singleton = new ${classObject.getName()}BusinessDelegate();
	    }
	    
	    return( singleton );
	}


   /**
	* ${classObject.getName()} Business Delegate Factory Method
	*
	* Returns a singleton instance of ${classObject.getName()}BusinessDelegate().
	* All methods are expected to be self-sufficient.
	* 
	* @param	${classObject.getName()}
	* @return 	${classObject.getName()}BusinessDelegate
	*/
	static public ${classObject.getName()}BusinessDelegate get${classObject.getName()}Instance( ${classObject.getName()} obj )
	{
	    if ( singleton == null )
	    {
	    	singleton = new ${classObject.getName()}BusinessDelegate( obj );
	    }
	    
	    return( singleton );
	}
	 
	 
    /**
     * Method to retrieve the ${classObject.getName()} via an ${classObject.getName()}PrimaryKey.
     * @param 	key
     * @return 	${classObject.getName()}
     * @exception ProcessingException - Thrown if processing any related problems
     * @exception IllegalArgumentException 
     */
    public ${classObject.getName()} get${classObject.getName()}( ${classObject.getName()}PrimaryKey key ) 
    throws ProcessingException, IllegalArgumentException
    {
        if ( key == null )
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:get${classObject.getName()}( ${classObject.getName()}PrimaryKey key ) - null key provided.";
            FrameworkDefaultLogger.error( errMsg );
            throw new IllegalArgumentException( errMsg );
        }
    
    	preGetBO( key );
    	
        ${classObject.getName()} returnBO = null;
                
        // Retrieve the home interface for the ${classObject.getName()} Session Bean
        // Create the ${classObject.getName()}Session Bean
        ${classObject.getName()}SessionBeanInterface serviceInterface = null;
        try
        {
            serviceInterface = new ${classObject.getName()}Locator().create${classObject.getName()}SessionBeanInterface();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:get${classObject.getName()}(..) - Could not create the ${classObject.getName()}Session Bean." + exc;
            FrameworkDefaultLogger.error( errMsg ); 
            throw new ProcessingException( errMsg );   
        }
                
        // Find the ${classObject.getName()} based upon the ${classObject.getName()} id of this businessObject
        ${classObject.getName()} newBO = null;
        try
        {
            newBO = serviceInterface.find${classObject.getName()}(key);
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:get${classObject.getName()}(..) - Could not find ${classObject.getName()} by ${classObject.getName()}PrimaryKey due to - " + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }

        // Now set the return value to the new businessObject
        returnBO = (${classObject.getName()})newBO;
        
        returnBO = (${name})postGetBO( returnBO );
        
        return returnBO;
    }


    /**
     * Method to retrieve a collection of all ${classObject.getName()}s
     *
     * @return      ArrayList<${classObject.getName()}> Null if there are none found
     * @exception ProcessingException Thrown if any problems
     */
    public ArrayList<${classObject.getName()}> getAll${classObject.getName()}() 
    throws ProcessingException
    {
    	preGetAllBOs();
    	 
        // Retrieve the home interface for the ${classObject.getName()}Session
        // Create the ${classObject.getName()}Session Bean
        ${classObject.getName()}SessionBeanInterface serviceInterface = null;
        
        try
        {
            serviceInterface = new ${classObject.getName()}Locator().create${classObject.getName()}SessionBeanInterface();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:getAll${classObject.getName()}(..) - " + exc ;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }

        // find the collection of ${classObject.getName()}s for the provided id
        ArrayList<${classObject.getName()}> allList = null;
        
        try
        {
            allList = serviceInterface.findAll${classObject.getName()}();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:getAll${classObject.getName()}s(..) - Could not find all ${classObject.getName()} due to - " + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }

        return array;
        
    }


   /**
    * Creates the provided BO.
    * @param		businessObject 	${classObject.getName()}
    * @return       ${classObject.getName()}
    * @exception    ProcessingException
    * @exception	IllegalArgumentException
    */
	public ${classObject.getName()} create${classObject.getName()}( ${classObject.getName()} businessObject )
    throws ProcessingException, IllegalArgumentException
    {
    	businessObject = (${classObject.getName()} )preCreateBO( businessObject );
    	
		if ( businessObject == null )
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:create${classObject.getName()}( ${classObject.getName()} businessObject ) - null businessObject provided.";
            FrameworkDefaultLogger.error( errMsg );
            throw new IllegalArgumentException( errMsg );
        }
    
        // Retrieve the home interface for the ${classObject.getName()}Session
        // Create the ${classObject.getName()}Session Bean
        ${classObject.getName()}SessionBeanInterface serviceInterface = null;
        try
        {
            serviceInterface = new ${classObject.getName()}Locator().create${classObject.getName()}SessionBeanInterface();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:create(..) - Could not create the ${classObject.getName()}Session Bean." + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }
        
        try
        {
            businessObject = (${classObject.getName()})serviceInterface.create((${classObject.getName()})businessObject);
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:create(..) - Could not create ${classObject.getName()} due to - " + exc;
            FrameworkDefaultLogger.error( errMsg );   
            throw new ProcessingException( errMsg );   
        }
       
        // Since versioning actually modifies the version attribute during the
        // EJB transaction, what is returned doesn't have it's versionID set 
        // correctly.  The safest action is to get it from the DAO...
        if ( businessObject.isVersioned() )
            businessObject = get${classObject.getName()}( businessObject.get${classObject.getName()}PrimaryKey() );

		businessObject = (${classObject.getName()} )postCreateBO( businessObject );
		
        return ( businessObject );
    }
        
   /**
    * Saves the underlying BO.
    * @param		businessObject		${classObject.getName()}
    * @return       what was just saved
    * @exception    ProcessingException
    * @exception  	IllegalArgumentException
    */
    public ${classObject.getName()} save${classObject.getName()}( ${classObject.getName()} businessObject ) 
    throws ProcessingException, IllegalArgumentException
    {
    	businessObject = (${classObject.getName()} )preSaveBO( businessObject );
    	
		if ( businessObject == null )
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:save${classObject.getName()}( ${classObject.getName()} businessObject ) - null businessObject provided.";
            FrameworkDefaultLogger.error( errMsg );
            throw new IllegalArgumentException( errMsg );
        }
    
        // Retrieve the home interface for the ${classObject.getName()}Session
        // Create the ${classObject.getName()}Session Bean
        ${classObject.getName()}SessionBeanInterface serviceInterface = null;
        try
        {
            serviceInterface = new ${classObject.getName()}Locator().create${classObject.getName()}SessionBeanInterface();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:save${classObject.getName()}() - Could not create the ${classObject.getName()}Session Bean." + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }
                
        // Save the provided value object
        try
        {
            businessObject = (${classObject.getName()})serviceInterface.save( (${classObject.getName()})businessObject );
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:save${classObject.getName()}() - Could not save ${classObject.getName()} due to - " + exc;
            FrameworkDefaultLogger.error( errMsg );   
            throw new ProcessingException( errMsg );   
        }
       
        // Since versioning actually modifies the version attribute during the
        // EJB transaction, what is returned doesn't have it's versionID set 
        // correctly.  The safest action is to get it from the DAO...
        if ( businessObject.isVersioned() )
            businessObject = get${classObject.getName()}( businessObject.get${classObject.getName()}PrimaryKey() );

		businessObject = (${classObject.getName()} )postSaveBO( businessObject );
		
        return ( businessObject );
    }
     
   /**
    * Deletes the associatied value object using the provided primary key.
    * @param		key 	${classObject.getName()}PrimaryKey    
    * @exception 	ProcessingException
    */
    public void delete( ${classObject.getName()}PrimaryKey key ) 
    throws ProcessingException, IllegalArgumentException
    {   
		preDeleteBO( key );
     	
		if ( key == null )
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:delete() - null key provided.";
            FrameworkDefaultLogger.error( errMsg );
            throw new IllegalArgumentException( errMsg );
        }
        
    	
        // Retrieve the home interface for the ${classObject.getName()}Session
        // Create the ${classObject.getName()}Session Bean
        ${classObject.getName()}SessionBeanInterface serviceInterface = null;
        try
        {
            serviceInterface = new ${classObject.getName()}Locator().create${classObject.getName()}SessionBeanInterface();
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:delete(..) - Could not create the ${classObject.getName()}Session Bean." + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }
                
        // Delete this ${classObject.getName()}
        try
        {
            serviceInterface.delete( key );
        }
        catch (Throwable exc)
        {
            String errMsg = "${classObject.getName()}BusinessDelegate:delete(..) - Could not delete ${classObject.getName()} by ${classObject.getName()} key due to - " + exc;
            FrameworkDefaultLogger.error( errMsg );
            throw new ProcessingException( errMsg );   
        }
        
        postDeleteBO( key );
        
        return;
    }
#end	
#end