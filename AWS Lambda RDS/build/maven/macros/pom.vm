#macro( awsLambdaFuncDecl $className $funcNameToCall $funcNameToExpose $desc $separatorChar )
#if( ${aib.getParam("terraform.inUse")} == "true" )
#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = "$aib.getApplicationNameFormatted()" )
#end##if( ${containerObject} )
resource "aws_lambda_function" "${funcNameToExpose}" {
  filename         = "/home/circleci/gitRoot/target/${appName}-${aib.getVersion()}.jar"
  function_name    = "${funcNameToExpose}"
  role             = "${aib.getParam('aws-lambda.lambdaRoleArn')}"
  handler          = "${aib.getRootPackageName(true)}.#getDelegatePackageName().${className}AWSLambdaDelegate::${funcNameToCall}"
  source_code_hash = "${esc.dollar}{filebase64sha256("/home/circleci/gitRoot/target/${appName}-${aib.getVersion()}.jar")}"
  runtime          = "${aib.getParam('aws-lambda.runtime')}"
  memory_size      = "${aib.getParam('aws-lambda.memorySize')}"
  timeout          = "${aib.getParam('aws-lambda.timeout')}"
  publish          = "${aib.getParam('aws-lambda.publish')}"
  environment {
    variables = {
      delegateDAOHost = "${esc.dollar}{aws_instance.web.public_ip}"
      delegateDAOPort = "8080"
    }
  }
  vpc_config {
     subnet_ids = ["${aib.getParam('aws-lambda.vpcSubnetIds')}"]
     security_group_ids = ["${aib.getParam('aws-lambda.vpcSecurityGroupIds')}"]
  }  
}

#else
              {
                "functionName": "${funcNameToExpose}",
                "description": "${desc}",
#if ( ${aib.getParam('aws-lambda.runtime')} == "java8" )                
                "handler": "${aib.getRootPackageName(true)}.#getDelegatePackageName().${className}AWSLambdaDelegate::${funcNameToCall}",
#else
				"handler": "functions_awslambda.${funcNameToCall}",
#end ##if ( ${aib.getParam('aws-lambda.runtime')} == "java8" )                
                "timeout": ${aib.getParam('aws-lambda.timeout')},
                "memorySize": ${aib.getParam('aws-lambda.memorySize')}

              }${separatorChar}
#end##macro( awsLambdaFuncDecl $className $funcNameToCall $funcNameToExpose $desc )
#end##macro( awsLambdaFuncDecl $className $funcNameToCall $funcNameToExpose $desc $separatorChar )
