#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = $aib.getApplicationNameFormatted() )
#end
version: 2.1
references:
#cacheReferences()
#terraformReferences()

jobs: 
  
  # core job 
  build_project:
  
    # assign the working directory
    working_directory: *working_directory
    
    # run the steps with Docker as the primary container
    # job commands run in this container
    # python 3.6.x image
    docker: # run the steps with Docker
      - image: circleci/python:3.7

    # env var assignment section
    environment:
        PIPENV_VENV_IN_PROJECT: true             
       
    # steps that comprise the `build-test` job
    steps:

      # check out source code to working directory
      - checkout                                

      # changing ownership
      - run: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO chown -R circleci:circleci /usr/local/bin'
      - run: '[ $EUID == 0 ] && SUDO="" || SUDO=sudo && $SUDO chown -R circleci:circleci /usr/local/lib/python3.7/site-packages'

      # Restore any previous cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "pom.xml" }}

      # use pip to install pipenv
      - run: 
          name: Installing pipenv
          command: |
              pip install pipenv
              pipenv install

      # use pipenv to install Django
      - run:  
          name: Installing Django
          command: |
              pipenv install Django
      
      # cache Python dependencies using checksum of pom.xml as the cache-key
      - save_cache: 
          key: deps9-{{ .Branch }}-{{ checksum "pom.xml" }}
          paths:
              - ".venv"
              - "/usr/local/bin"
              - "/usr/local/lib/python3.6/site-packages"

      # run tests using pytest and store results
      - run:
          name: Installing pytest for django
          command: |
              pipenv install pytest-django

      - run:
          name: Running tests using pytest
          command: |
              pipenv run pytest --junitxml=test-results/junit.xml ${appName}/tests


      # Upload test results for display in Test Summary:
      # https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results: 
          path: test-results

      # Upload test summary for display in Artifacts: 
      # https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: test-results
          destination: tr1

#dockerImageDeclaration()
#terraformJobDefinition()

# simple workflow to get the build_test job started
workflows:
  version: 2
  what_to_do:
    jobs:
      - build_project
#terraformJobDeclaration()