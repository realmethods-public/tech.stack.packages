#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = $aib.getApplicationNameFormatted() )
#end
#set( $workingDir = $appName )
version: 2.1

references:
#cacheReferences()
#terraformReferences()

jobs:

  # core job
  build_test_project:
 
    # assign the working directory
    working_directory: *working_directory

    # run the steps with Docker as the primary container
    # job commands run in this container
    # CircleCI Java8 image, installs Apache Maven
    # mongo:4.0.5, run in a common network where ports exposed on 
    #      the primary container are available on localhost.
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-browsers
      - image: mongo:4.0.5
        command: [mongod, --smallfiles]

    # steps that comprise the `build_test` job
    steps:

      # check out source code to working directory
      - checkout

      # Restore any previous cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - *restore_repo

      # gets the project dependencies and tests using JUnit
      - run:
          name: compiling, running test using Junit, the create a deployable war file
          command: mvn package      

      # cache everything using checksum of pom.xml as the cache-key
      - *save_repo

      # save the results from the testing that occurred during
      # the maven packaging in the prior step
      - run:
          name: Save test results
          command: |
              mkdir -p ~/test-results/junit/
              find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always          
          
      # Upload test results for display in Test Summary:
      # https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: ~/test-results

      # Upload test summary for display in Artifacts:
      # https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: ~/test-results/junit

#dockerImageDeclaration()
#terraformJobDefinition()

#  workflow to execute the build_test, docker_build, and terraform jobs

workflows:
  version: 2
  what_to_do:
    jobs:
      - build_test_project
#terraformJobDeclaration()