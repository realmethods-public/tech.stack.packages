#xmlHeader()

#set( $className = $classObject.getName() )
#set( $lowercaseClassName = $Utils.lowercaseFirstLetter( $className ) )
#set( $includePKs = true )
#set( $attributeCollections = $classObject.getAttributesOrderedAsCollectionsInHierarchy( $includePKs ) )
#set( $pkAttributes = $attributeCollections.get(0) )
#set( $directAttributes = $attributeCollections.get(1) )
#set( $compositeAttributes = $attributeCollections.get(2) )
#set( $singleAssociations = $classObject.getSingleAssociationsWithSourceRole() )
#set( $readOnly = false )
#set( $pk = ${classObject.getFirstPrimaryKey()} )		
#set( $pkExpression = "${pk.getName()}" ) 
#set( $jQueryClassName = "#${className}" )
#set( $jQueryLoadingDivId = "${jQueryClassName}FormLoadingDivId")
#set( $jQueryProfileFormId = "${jQueryClassName}ProfileFormId")
#set( $jQueryAssociationDivId = "${jQueryClassName}AssociationDivId")

<!-- style sheet references -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet" />

<!-- javascript inclusions -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js"></script>
<script src="/js/jquery-mask-as-number.js" type="text/javascript" ></script>
<script src="/js/bootstrap-datetimepicker.js" type="text/javascript" ></script>

<!-- masked numeric class setup -->
<script>
    $('.maskedWholeNumberField').maskAsNumber();			// whole # declaration
    $('.maskedDecimalField').maskAsNumber({decimals: 2});	// decimal # declaration
</script>

<!-- datetime class setup -->
<script type="text/javascript">
    $(".form_datetime").datetimepicker({format: 'yyyy-mm-dd',autoclose: true,todayBtn: true});
</script>             

<script type="text/javascript">
	$( document ).ready(function()
	{
		var action 	= getParam("action");
		var id 		= getParam("${pkExpression}");
		
	 	if ( action == 'edit' )
			$( '${jQueryAssociationDivId}' ).show();

		var url, args, parentId, parentUrl, addUrl, deleteUrl, modelUrl;
#foreach( $multiAssociation in $classObject.getMultipleAssociations() )
	#if ( $multiAssociation.isListable() == true )
		#set( $roleName = $multiAssociation.getRoleName() )
		#set( $associationClassType = $multiAssociation.getType() )
		parentId	= "${pkExpression}=" + getParam("${pkExpression}");
  		parentUrl	= "/${className}/save${roleName}?" + parentId;
  		addUrl 		= "/${associationClassType}/Profile?action=create";
  		deleteUrl 	= "/${className}/delete${roleName}?" + parentId;
  		modelUrl 	= "/${className}/load${roleName}?" + parentId;

		args = 'roleName=${roleName}&addUrl=' + addUrl + '&deleteUrl=' + deleteUrl + '&modelUrl=' + modelUrl + '&parentUrl=' + parentUrl;
		
		url = '/${associationClassType}/List?' + args;
		console.log( 'multi association url is ' + url );
		jQuery.get( url, function( data ) 
		{
		    $('#' + '${className}_${roleName}DivId').html( data );
		});		
		
		//$('#' + '${className}_${roleName}DivId').load(url);
		
	#end ##if ( $multiAssociation.isListable() == true )
#end ##foreach( $multiAssociation in $classObject.getMultipleAssociations() )

#set( $includeComposites = false )
#foreach( $association in $classObject.getSingleAssociations( ${includeComposites} ) )
	#set( $roleName = $association.getRoleName() )
	#set( $associationClassType = $association.getType() )
	#set( $childClassObject = $aib.getClassObject( $associationClassType) )
	#set( $childKeyFieldName = $childClassObject.getAllPrimaryKeysInHierarchy().iterator().next().getName() )		
	#set( $childFirstAttribName = $childClassObject.findAttributeAsBestFitName() )
	#set( $inputName = "${roleName}InputId" )
		
		$( "#multiSelectFor${roleName}" ).on("change", function(e)  
		{
			//assign the selected value
			var input = document.getElementById("${roleName}InputId");				
			input.value = this.options[this.selectedIndex].text;
	
			if ( input.value != 'no selection' )
			{
				// save the ${roleName}
				var parentId = document.getElementById( '${pkExpression}' ).value;
		 		var childId = this.options[this.selectedIndex].value;
		 		var url 	= '/${className}/save${roleName}?${pkExpression}=' + parentId + "&childId=" + childId;
	
				jQuery.ajax(
				{
			  		url: url,
			  		dataType: 'json',
		            type: "POST",
		            contentType: "application/json",			  		
				}).always(function( data ) 
				{
					doneSaving${className}();
				});
			}
			// hide the select
			$("#multiSelectFor${roleName}DivId").hide();
		});
	
	 	$( document ).on('refresh${roleName}For${className}', function() 
	 	{			
	 		// reload ${className} and apply the ${roleName}
	 		var url 	= '/${classObject.getName()}/load?${pkExpression}=' + id;
	 		var element = document.getElementById( '${roleName}InputId' );
	 		var field 	= '${Utils.lowercaseFirstLetter( ${roleName} )}.${childFirstAttribName}';
	 		
			jQuery.ajax(
			{
		  		url: url,
		  		dataType: 'json',
	            type: "POST",
	            contentType: "application/json",			  				  		
			}).always(function( data ) 
			{
				var val;
				var indexes = field.split( "." );
				
				if ( indexes.length == 1 )
					val = data[indexes[0]];
				else if ( indexes.length == 2 )
					val = data[indexes[0]][indexes[1]];

		 		element.value = val;
			});
	    });
#end

		// if edit, populate form fields		
		if ( action == 'edit' )
		{
			jQuery.ajax(
			{
		  		url: '/${classObject.getName()}/load?${pkExpression}=' + id,
		  		dataType: 'json',
	            type: "POST",
	            contentType: "application/json",			  				  		
			}).always(function( data ) 
			{
				console.log( 'load returned ' + JSON.stringify( data ) );
				
				var allControls = document.querySelectorAll("input, select, textArea");

				for(var i=0; i < allControls.length; i++)
				{
					var element = allControls[i];
					var elementName = element.name;
					var val;
					
					var indexes = elementName.split( "." );
					if ( indexes.length == 1 )
						val = data[indexes[0]];
					else if ( indexes.length == 2 )
						val = data[indexes[0]][indexes[1]];

					if ( val !== undefined && element.type )
					{
						if ( element.type === 'checkbox' )
						{
							if ( val == true )
								element.checked = true;
							else
								element.checked = false;
						}
						else if ( element.type === 'select' )
						{
							// select the right option
						}
						element.value = val;
					}
				}
			});
		}
	});
	
	// ************************************************
	// notified when the saving is complete
	// ************************************************
	function doneSaving${className}()
	{
		document.getElementById("${className}FormStatusDivId").innerHTML = '<span style="color:blue">done saving</span>';
	}
	
	// ************************************************
	// form reset
	// ************************************************
	function reset${className}()
	{
		document.getElementById("${className}ProfileFormId").reset();
	}
	
	// ************************************************
	// makes an ajax call to a ${className} controller
	// to passing the form data as a JSON object to be
	// saved
	// ************************************************
	function save${className}()
	{
		$('${jQueryLoadingDivId}').show();

		// need to force the val to be handled by the Boolean type
		$("${jQueryProfileFormId} input:checkbox").each(function()
		{
    		if ( $(this).is(':checked') == false ) 
    			$(this).val( 'false' );    			
    		else
    			$(this).val('true');
  		});

		var url 		= '/${classObject.getName()}/save';		
		var parentUrl 	= getParam( "parentUrl" );
		var formData 	= formDataToJson( $('${jQueryProfileFormId}'));
		var action 		= getParam( "action" );

		console.log( 'parentUrl is ' + parentUrl );
					
		formData = JSON.stringify( formData );
				
		jQuery.ajax(
		{
	  		url: url,
	  		dataType: 'json',
	  		data : formData,
            type: "POST",
            contentType: "application/json",
	  		
		}).always(function( data ) 
		{
			if ( parentUrl != null && parentUrl != 'null' && parentUrl != '' )
			{
				parentUrl = parentUrl + '&childId=' + data['${pk.getName()}'];
				jQuery.ajax(
				{
			  		url: parentUrl,
			  		dataType: 'json',
			  		type: "POST",
		            contentType: "application/json",			  		
				}).always(function( data ) 
				{
				});
			}

/********************* 
   	force a close on create rather than show the children since there are none,\
   	causing an inspection on a freshly created $className
   
			// need to assign the related hidden primary key element value to 
			// the new value created during the save
			document.getElementById('${pk.getName()}').value = data['${pk.getName()}'];

			if ( action == 'create' )
				$( '${jQueryAssociationDivId}' ).show();
***********************/				
			doneSaving${className}();
		});
		
		$('${jQueryLoadingDivId}').hide();			
	
	}
#foreach( $singleAssociation in $classObject.getSingleAssociationsWithoutSourceRole() )
	#if ( $singleAssociation.isListable() == true && $singleAssociation.isComposite() == false )
		#set( $roleName = $singleAssociation.getRoleName() )
		#set( $associationClassType = $singleAssociation.getType() )
		#set( $childClassObject = $aib.getClassObject( $associationClassType) )
		#set( $childKeyFieldName = $childClassObject.getAllPrimaryKeysInHierarchy().iterator().next().getName() )		
		#set( $ownerName = $className )
		#set( $param = "${${Utils.lowercaseFirstLetter( ${roleName} )}.${childKeyFieldName}}" )
		#set( $childFirstAttribName = $childClassObject.findAttributeAsBestFitName() )
		
	// ***************************************************
	// call the addHelper function with the ${associationClassType}
	// and relevant role name ${roleName}
	// ***************************************************
	function add${roleName}()
	{
		addHelperFor${className}( '${associationClassType}', '${roleName}' );
	}
	
	// ***************************************************
	// call the deleteHelper function with the relevant 
	// role name ${roleName} 
	// ***************************************************
	function delete${roleName}()
	{ 
		deleteHelperFor${className}( '${roleName}', '${childFirstAttribName}' );
	}

	// ***************************************************
	// loads all ${associationClassType} as options into 
	// a select control for binding with the ${roleName}
	// of a ${className} model 
	// ***************************************************
	function add${roleName}FromList()
	{
		// display the multi-select (loadAll and ${roleName} lists)
		$("#multiSelectFor${roleName}DivId").show();

		jQuery.ajax(
		{
		    url: "/${associationClassType}/loadAll",
		    dataType: 'json',
            type: "POST",
            contentType: "application/json",			  				    
		}).always(function( data ) 
		{
			$("#multiSelectFor${roleName}").empty();
			
			var selectId	= "multiSelectFor${roleName}";
			var text 		= '${childFirstAttribName}';
			var value 		= '${childKeyFieldName}';
			var includeBlank = true;
			
			loadOptionsWithJSONData( selectId, data, value, text, includeBlank  );
		});
	}
		
    #end
#end
#foreach( $multiAssociation in $classObject.getMultipleAssociations() )
	#if ( $multiAssociation.isListable() == true )
		#set( $roleName = $multiAssociation.getRoleName() )
		#set( $associationClassType = $multiAssociation.getType() )
		#set( $childClassObject = $aib.getClassObject( $associationClassType) )
		#set( $childKeyFieldName = $childClassObject.getAllPrimaryKeysInHierarchy().iterator().next().getName() )		
		#set( $ownerName = $className )
		#set( $param = "${Utils.lowercaseFirstLetter( ${roleName} )}.${childKeyFieldName}}" )
		#set( $childFirstAttribName = $childClassObject.findAttributeAsBestFitName() )
	// ***************************************************
	// call the addHelper function with the ${associationClassType}
	// and relevant role name ${roleName}
	// ***************************************************
	function add${roleName}()
	{
		addHelperFor${className}( '${associationClassType}', '${roleName}' );
	}

	// ***************************************************
	// call the deleteHelper function with the relevant 
	// role name ${roleName} 
	// ***************************************************
	function delete${roleName}()
	{
		var ids;
		deleteHelperFor${className}( '${roleName}', '${childFirstAttribName}', ids );
	}
		
    #end
#end
	// ***************************************************
	// shows the form for a child and forces the creation
	// of the child to be bound with the parent on its
	// roleName
	// ***************************************************
    function addHelperFor${className}( associationClassType, roleName )
	{    
		var title = "Add New " + associationClassType + " for ${className} " + roleName;
		var parentId = document.getElementById("${pkExpression}").value;
		parentUrl = '/${className}/save' + roleName + '?${pkExpression}=' + parentId;
		var url = '/' + associationClassType + '/Profie?action=create&parentUrl=' + parentUrl + '&parentName=${lowercaseClassName}&roleName=' + roleName;
		var eventToFire = 'refresh' + roleName + 'For${className}';
		inspectionDialog( title, url, eventToFire );
    }

	// ***************************************************
	// upon confirmation, forces a disassociation of 
	// children by id from the parent on it's roleName
	// ***************************************************
	function deleteHelperFor${className}( nameOfRole, keyFieldName, ids )
	{
    	BootstrapDialog.confirm
    	({
        	title: 'WARNING',
        	message: 'Are you sure?',
            type: BootstrapDialog.TYPE_WARNING, // <-- Default value is BootstrapDialog.TYPE_PRIMARY
            closable: true, // <-- Default value is false
            btnCancelLabel: 'No', // <-- Default value is 'Cancel',
            btnOKLabel: 'Yes', // <-- Default value is 'OK',
            btnOKClass: 'btn-warning', // <-- If you didn't specify it, dialog type will be used,
            callback: function(result) 
            {
				var elementName = nameOfRole.toLowerCase() + "." + keyFieldName;
				var element 	= document.getElementsByName(elementName)[0];
				var url 		= '/${classObject.getName()}/delete' + nameOfRole;
				
				url = url + '?childIds=' + ids;
				
				jQuery.ajax(
				{
			  		url: url,
			  		dataType: 'text',
			  		data : $('${jQueryProfileFormId}').serialize(),			  		
				}).always(function( data ) 
				{
					document.getElementById("${className}FormStatusDivId").innerHTML = '<span style="color:blue">done deleting</span>';
					element.value = ""; // clear it
				});
			}
    	});
	
	}
</script>

<div id="${className}ProfileFormDiv" style="padding:4px;border:2px solid lightgray">
  <form id="${className}ProfileFormId" class="formTableClass">
    <!-- default to 0 is important to indicate an unassigned key to the Controller layer -->
    <input type=hidden id="${pkExpression}" name="${pkExpression}" value="0"/>  		  	
########################################################
## First output the direct attributes of the class
########################################################
<!-- Direct Attributes -->          	
#set( $parentPrefix = "" )
#generateFormFields( $directAttributes $parentPrefix )

<!-- Next, output the composites from single associations as fields -->          	
    <table class="formTableClass">
#foreach( $composite in $compositeAttributes)
	#if ( $composite.isFromSingleValueAssociation() == true )
	  <tr class="formRowClass">		
	    <td bgcolor="#0000ff" colspan="2" align="left">
		  <b><font color="#fffff+f">${composite.getDisplayName()}</font></b>
		 </td>
		    #set( $parentPrefix = "${Utils.lowercaseFirstLetter( ${composite.getName()} )}" )
		    #generateFormFields( $composite.getAttributes() $parentPrefix )
	  </tr>
	#end ##if ( $composite.isFromAssociation() == true )
#end  		  	
    </table>
  	<br>
	<div>
		<a href="#" data-toggle="tooltip" data-placement="below" title="save ${classObject.getName()}" onclick="save${className}()">
		    <button type="button" class="btn btn-default btn-sm">
		      <span class="glyphicon glyphicon-floppy-disk">
		      	Save
		      </span>
			</button>
		</a>
		<a href="#" data-toggle="tooltip" data-placement="below" title="reset" onclick="reset${className}()">
		    <button type="button" class="btn btn-default btn-sm">
		      <span class="glyphicon glyphicon-refresh">
		      	Reset
		      </span>
			</button>
		</a>
	</div> 
  </form>
</div>

<!-- Next, output the single associations -->

<div id="${className}AssociationDivId" style="display:none">
  <div class="singleAssociationClass">
    <table class="associationTableClass">
#foreach( $singleAssociation in $classObject.getSingleAssociationsWithoutSourceRole() )
	#if ( $singleAssociation.isListable() == true && $singleAssociation.isComposite() == false )
		#set( $roleName = $singleAssociation.getRoleName() )
		#set( $associationClassType = $singleAssociation.getType() )
		#set( $childClassObject = $aib.getClassObject( $associationClassType) )
		#set( $childKeyFieldName = $childClassObject.getAllPrimaryKeysInHierarchy().iterator().next().getName() )
		#set( $childFirstAttribName = $childClassObject.findAttributeAsBestFitName() )
		#set( $ownerName = $className )
		#set( $inputName = "${Utils.lowercaseFirstLetter( ${roleName} )}.${childFirstAttribName}" )	
	  <tr class="formTRClass">
	    <td class="formTDClass">
		  <div class="sectionClass">
		    <div class="sectionHeaderClass">
		      <span class="sectionTitleClass">
		        ${roleName}
		      </span>
		    </div>
		    <div class="sectionBodyClass">	  
	          <table class="formTableClass">
	            <tr class="formTRClass">
	              <td class="formTDClass">
	      		    <input type='text' id="${roleName}InputId" name="${inputName}" class="form-control" disabled/>
	      	      </td>
	              <td  class="formTDClass" style="vertical-align:center">
	                <div id="multiSelectFor${roleName}DivId" style="display:none">
	                  <select id="multiSelectFor${roleName}" />
	                  <a href="#" onclick="$('#multiSelectFor${roleName}DivId').hide();">
				        <button type="button" class="btn btn-default btn-sm">
				          <span class="glyphicon glyphicon-remove"/>
				 	    </button>
				      </a>
	                </div>
				    <a href="#" data-toggle="tooltip" data-placement="below" title="create ${associationClassType}" onclick="add${roleName}()">
  				      <button type="button" class="btn btn-default btn-sm">
				        <span class="glyphicon glyphicon-plus"/>
					  </button>
				    </a>
				    <a href="#" data-toggle="tooltip" data-placement="below" title="add ${associationClassType} from list" onclick="add${roleName}FromList()">
				      <button type="button" class="btn btn-default btn-sm">
				        <span class="glyphicon glyphicon-th-list"/>
					  </button>
				    </a>
				    <a href="#" data-toggle="tooltip" data-placement="below" title="delete ${associationClassType}" onclick="delete${roleName}()">
				      <button type="button" class="btn btn-default btn-sm">
				        <span class="glyphicon glyphicon-trash"/>
				 	  </button>
				    </a>
	              </td>
	            </tr>
		      </table>
		    </div>
		  </div>
	    </td>
	  </tr>
	#end 
#end
	</table>
  </div>

  <!-- finally, output the multiple associations -->
  
  <div "class=multipleAssociationClass">  
	<table class="associationTableClass">  
#foreach( $multiAssociation in $classObject.getMultipleAssociations() )
	#if ( $multiAssociation.isListable() == true )
		#set( $roleName = $multiAssociation.getRoleName() )
		#set( $associationClassType = $multiAssociation.getType() )
	  <tr class="formRowClass">
	    <td class="formTDClass">
		  <div class="sectionClass">
		    <div class="sectionHeaderClass">
		      <span class="sectionTitleClass">
		        ${roleName}
		      </span>
		    </div>
		    <div class="sectionBodyClass">	  
	          <table class="formTableClass">
	            <tr class="formTRClass">
	              <td class="formTDClass">
	                <div id="${className}_${roleName}DivId">
	                </div>
	      	      </td>
	            </tr>
		      </table>
		    </div>
		  </div>
	    </td>
	  </tr>
	#end 
#end
	</table>

  </div>
</div>
<div id="${className}FormLoadingDivId" style="display:none;color:black">
  saving $className...<image src="../img/load_new.gif" width=48 height=48/>
</div>				  				  
<div id="${className}FormStatusDivId">
</div>				  				  


